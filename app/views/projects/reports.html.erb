<h1>Reports</h1>

<div class="row use_cases">
	<div class="span4" style="border: thin solid #CCC">
		
    <%= form_tag do %>

      <div class='control-group'>
        <label class='control-label'>Chart Type</label>
        <div class='controls'>
            <%= select_tag :chart_type, options_for_select(["User hours", "Project tasks", "User tasks", "Use cases"]), :include_blank => true, :class => "chosen-select" %> 
        </div>
      </div>
    </br>
      <div class='control-group'>
        <label class='control-label'>Initial Date</label>
        <div class='controls'>
            <%= text_field_tag :initial_date, nil %> 
        </div>
      </div>

      <div class='control-group'>
        <label class='control-label'>Final Date</label>
        <div class='controls'>
            <%= text_field_tag :final_date, nil %> 
        </div>
      </div>      
      
    <% end %>
	</div>
	<div class="span8" style="border: thin solid #CCC; min-height: 500px;" id="chart">		
		
	</div>
</div>

<% content_for :javascripts do %>

<script type="text/javascript">

function loadGraph(){
  var select = $('#chart_type');
  var initial_date = $('#initial_date');
  var final_date = $('#final_date');

  if(initial_date.val() != "" && final_date.val() != "")
  {
    switch(select.val())
    {
      case "User hours":
        $.ajax({
                type: "GET",
                url: "<%= reports_hours_users_project_path(@project) %>",
                dataType: "script",
                data: {initial_date: initial_date.val(), final_date: final_date.val()}
              });
        break;

      case "Project tasks":
        $.ajax({
                type: "GET",
                url: "<%= reports_tasks_project_project_path(@project) %>",
                dataType: "script",
                data: {initial_date: initial_date.val(), final_date: final_date.val()}
              });
        break;

      case "User tasks":
        $.ajax({
                type: "GET",
                url: "<%= reports_tasks_user_project_path(@project) %>",
                dataType: "script",
                data: {initial_date: initial_date.val(), final_date: final_date.val()}
              });
        break;

      case "Use cases":
        $.ajax({
                type: "GET",
                url: "<%= reports_use_case_project_path(@project) %>",
                dataType: "script"
              });
        break;

      default:
        break;
    }
  }

}

chosenSelect(200);
$('#initial_date').datepicker();
$('#final_date').datepicker();

$('#chart_type').change(function(){
  loadGraph();
});

$('#final_date').change(function(){
  loadGraph();
});

$('#initial_date').change(function(){
  loadGraph();
});




//=====================================
// SIMPLE BAR CHART
//=====================================

/*var dataString = "[{\"key\": \"N. Risso\", \"val\": 10},{\"key\": \"S. Larrain\", \"val\": 12}, {\"key\": \"V. Ibaseta\", \"val\": 13}, {\"key\": \"N. Escobar\", \"val\": 13}, {\"key\": \"J. Vergara\", \"val\": 15}]";

var data = JSON.parse(dataString);

var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var margin = {top: 40, right: 20, bottom: 30, left: 40},
    width  = actualWidth - margin.left - margin.right,
    height = actualHeight - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

x.domain(data.map(function(d){ return d.key}));
y.domain([0, d3.max(data.map(function(d){ return d.val}))]);

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Value");

svg.selectAll(".bar")
    .data(data)
  .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return x(d.key); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d.val); })
    .attr("height", function(d) { return height - y(d.val); })*/


//==================
// HIERARCHY PACK
//==================
/*
var dataString = "{ \"name\": \"flare\", \"children\": [  {   \"name\": \"analytics\",   \"children\": [    {     \"name\": \"cluster\",     \"children\": [      {\"name\": \"AgglomerativeCluster\"},      {\"name\": \"CommunityStructure\"},      {\"name\": \"HierarchicalCluster\"},      {\"name\": \"MergeEdge\"}     ]    },    {     \"name\": \"graph\",     \"children\": [      {\"name\": \"BetweennessCentrality\"},      {\"name\": \"LinkDistance\"},      {\"name\": \"MaxFlowMinCut\"},      {\"name\": \"ShortestPaths\"},      {\"name\": \"SpanningTree\"}     ]    },    {     \"name\": \"optimization\",     \"children\": [      {\"name\": \"AspectRatioBanker\"}     ]    }   ]  },  {   \"name\": \"animate\",   \"children\": [    {\"name\": \"Easing\"},    {\"name\": \"FunctionSequence\"},    {     \"name\": \"interpolate\",     \"children\": [      {\"name\": \"ArrayInterpolator\"},      {\"name\": \"ColorInterpolator\"},      {\"name\": \"DateInterpolator\"},      {\"name\": \"Interpolator\"},      {\"name\": \"MatrixInterpolator\"},      {\"name\": \"NumberInterpolator\"},      {\"name\": \"ObjectInterpolator\"},      {\"name\": \"PointInterpolator\"},      {\"name\": \"RectangleInterpolator\"}     ]    },    {\"name\": \"ISchedulable\"},    {\"name\": \"Parallel\"},    {\"name\": \"Pause\"},    {\"name\": \"Scheduler\"},    {\"name\": \"Sequence\"},    {\"name\": \"Transition\"},    {\"name\": \"Transitioner\"},    {\"name\": \"TransitionEvent\"},    {\"name\": \"Tween\"}   ]  },  {   \"name\": \"data\",   \"children\": [    {     \"name\": \"converters\",     \"children\": [      {\"name\": \"Converters\"},      {\"name\": \"DelimitedTextConverter\"},      {\"name\": \"GraphMLConverter\"},      {\"name\": \"IDataConverter\"},      {\"name\": \"JSONConverter\"}     ]    },    {\"name\": \"DataField\"},    {\"name\": \"DataSchema\"},    {\"name\": \"DataSet\"},    {\"name\": \"DataSource\"},    {\"name\": \"DataTable\"},    {\"name\": \"DataUtil\"}   ]  },  {   \"name\": \"display\",   \"children\": [    {\"name\": \"DirtySprite\"},    {\"name\": \"LineSprite\"},    {\"name\": \"RectSprite\"},    {\"name\": \"TextSprite\"}   ]  },  {   \"name\": \"flex\",   \"children\": [    {\"name\": \"FlareVis\"}   ]  },  {   \"name\": \"physics\",   \"children\": [    {\"name\": \"DragForce\"},    {\"name\": \"GravityForce\"},    {\"name\": \"IForce\"},    {\"name\": \"NBodyForce\"},    {\"name\": \"Particle\"},    {\"name\": \"Simulation\"},    {\"name\": \"Spring\"},    {\"name\": \"SpringForce\"}   ]  },  {   \"name\": \"query\",   \"children\": [    {\"name\": \"AggregateExpression\"},    {\"name\": \"And\"},    {\"name\": \"Arithmetic\"},    {\"name\": \"Average\"},    {\"name\": \"BinaryExpression\"},    {\"name\": \"Comparison\"},    {\"name\": \"CompositeExpression\"},    {\"name\": \"Count\"},    {\"name\": \"DateUtil\"},    {\"name\": \"Distinct\"},    {\"name\": \"Expression\"},    {\"name\": \"ExpressionIterator\"},    {\"name\": \"Fn\"},    {\"name\": \"If\"},    {\"name\": \"IsA\"},    {\"name\": \"Literal\"},    {\"name\": \"Match\"},    {\"name\": \"Maximum\"},    {     \"name\": \"methods\",     \"children\": [      {\"name\": \"add\"},      {\"name\": \"and\"},      {\"name\": \"average\"},      {\"name\": \"count\"},      {\"name\": \"distinct\"},      {\"name\": \"div\"},      {\"name\": \"eq\"},      {\"name\": \"fn\"},      {\"name\": \"gt\"},      {\"name\": \"gte\"},      {\"name\": \"iff\"},      {\"name\": \"isa\"},      {\"name\": \"lt\"},      {\"name\": \"lte\"},      {\"name\": \"max\"},      {\"name\": \"min\"},      {\"name\": \"mod\"},      {\"name\": \"mul\"},      {\"name\": \"neq\"},      {\"name\": \"not\"},      {\"name\": \"or\"},      {\"name\": \"orderby\"},      {\"name\": \"range\"},      {\"name\": \"select\"},      {\"name\": \"stddev\"},      {\"name\": \"sub\"},      {\"name\": \"sum\"},      {\"name\": \"update\"},      {\"name\": \"variance\"},      {\"name\": \"where\"},      {\"name\": \"xor\"},      {\"name\": \"_\"}     ]    },    {\"name\": \"Minimum\"},    {\"name\": \"Not\"},    {\"name\": \"Or\"},    {\"name\": \"Query\"},    {\"name\": \"Range\"},    {\"name\": \"StringUtil\"},    {\"name\": \"Sum\"},    {\"name\": \"Variable\"},    {\"name\": \"Variance\"},    {\"name\": \"Xor\"}   ]  },  {   \"name\": \"scale\",   \"children\": [    {\"name\": \"IScaleMap\"},    {\"name\": \"LinearScale\"},    {\"name\": \"LogScale\"},    {\"name\": \"OrdinalScale\"},    {\"name\": \"QuantileScale\"},    {\"name\": \"QuantitativeScale\"},    {\"name\": \"RootScale\"},    {\"name\": \"Scale\"},    {\"name\": \"ScaleType\"},    {\"name\": \"TimeScale\"}   ]  },  {   \"name\": \"util\",   \"children\": [    {\"name\": \"Arrays\"},    {\"name\": \"Colors\"},    {\"name\": \"Dates\"},    {\"name\": \"Displays\"},    {\"name\": \"Filter\"},    {\"name\": \"Geometry\"},    {     \"name\": \"heap\",     \"children\": [      {\"name\": \"FibonacciHeap\"},      {\"name\": \"HeapNode\"}     ]    },    {\"name\": \"IEvaluable\"},    {\"name\": \"IPredicate\"},    {\"name\": \"IValueProxy\"},    {     \"name\": \"math\",     \"children\": [      {\"name\": \"DenseMatrix\"},      {\"name\": \"IMatrix\"},      {\"name\": \"SparseMatrix\"}     ]    },    {\"name\": \"Maths\"},    {\"name\": \"Orientation\"},    {     \"name\": \"palette\",     \"children\": [      {\"name\": \"ColorPalette\"},      {\"name\": \"Palette\"},      {\"name\": \"ShapePalette\"},      {\"name\": \"SizePalette\"}     ]    },    {\"name\": \"Property\"},    {\"name\": \"Shapes\"},    {\"name\": \"Sort\"},    {\"name\": \"Stats\"},    {\"name\": \"Strings\"}   ]  },  {   \"name\": \"vis\",   \"children\": [    {     \"name\": \"axis\",     \"children\": [      {\"name\": \"Axes\"},      {\"name\": \"Axis\"},      {\"name\": \"AxisGridLine\"},      {\"name\": \"AxisLabel\"},      {\"name\": \"CartesianAxes\"}     ]    },    {     \"name\": \"controls\",     \"children\": [      {\"name\": \"AnchorControl\"},      {\"name\": \"ClickControl\"},      {\"name\": \"Control\"},      {\"name\": \"ControlList\"},      {\"name\": \"DragControl\"},      {\"name\": \"ExpandControl\"},      {\"name\": \"HoverControl\"},      {\"name\": \"IControl\"},      {\"name\": \"PanZoomControl\"},      {\"name\": \"SelectionControl\"},      {\"name\": \"TooltipControl\"}     ]    },    {     \"name\": \"data\",     \"children\": [      {\"name\": \"Data\"},      {\"name\": \"DataList\"},      {\"name\": \"DataSprite\"},      {\"name\": \"EdgeSprite\"},      {\"name\": \"NodeSprite\"},      {       \"name\": \"render\",       \"children\": [        {\"name\": \"ArrowType\"},        {\"name\": \"EdgeRenderer\"},        {\"name\": \"IRenderer\"},        {\"name\": \"ShapeRenderer\"}       ]      },      {\"name\": \"ScaleBinding\"},      {\"name\": \"Tree\"},      {\"name\": \"TreeBuilder\"}     ]    },    {     \"name\": \"events\",     \"children\": [      {\"name\": \"DataEvent\"},      {\"name\": \"SelectionEvent\"},      {\"name\": \"TooltipEvent\"},      {\"name\": \"VisualizationEvent\"}     ]    },    {     \"name\": \"legend\",     \"children\": [      {\"name\": \"Legend\"},      {\"name\": \"LegendItem\"},      {\"name\": \"LegendRange\"}     ]    },    {     \"name\": \"operator\",     \"children\": [      {       \"name\": \"distortion\",       \"children\": [        {\"name\": \"BifocalDistortion\"},        {\"name\": \"Distortion\"},        {\"name\": \"FisheyeDistortion\"}       ]      },      {       \"name\": \"encoder\",       \"children\": [        {\"name\": \"ColorEncoder\"},        {\"name\": \"Encoder\"},        {\"name\": \"PropertyEncoder\"},        {\"name\": \"ShapeEncoder\"},        {\"name\": \"SizeEncoder\"}       ]      },      {       \"name\": \"filter\",       \"children\": [        {\"name\": \"FisheyeTreeFilter\"},        {\"name\": \"GraphDistanceFilter\"},        {\"name\": \"VisibilityFilter\"}       ]      },      {\"name\": \"IOperator\"},      {       \"name\": \"label\",       \"children\": [        {\"name\": \"Labeler\"},        {\"name\": \"RadialLabeler\"},        {\"name\": \"StackedAreaLabeler\"}       ]      },      {       \"name\": \"layout\",       \"children\": [        {\"name\": \"AxisLayout\"},        {\"name\": \"BundledEdgeRouter\"},        {\"name\": \"CircleLayout\"},        {\"name\": \"CirclePackingLayout\"},        {\"name\": \"DendrogramLayout\"},        {\"name\": \"ForceDirectedLayout\"},        {\"name\": \"IcicleTreeLayout\"},        {\"name\": \"IndentedTreeLayout\"},        {\"name\": \"Layout\"},        {\"name\": \"NodeLinkTreeLayout\"},        {\"name\": \"PieLayout\"},        {\"name\": \"RadialTreeLayout\"},        {\"name\": \"RandomLayout\"},        {\"name\": \"StackedAreaLayout\"},        {\"name\": \"TreeMapLayout\"}       ]      },      {\"name\": \"Operator\"},      {\"name\": \"OperatorList\"},      {\"name\": \"OperatorSequence\"},      {\"name\": \"OperatorSwitch\"},      {\"name\": \"SortOperator\"}     ]    },    {\"name\": \"Visualization\"}   ]  } ]}";
var data = JSON.parse(dataString);

/*var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var w = actualWidth,
    h = actualHeight,
    r = d3.min([w, h]),
    x = d3.scale.linear().range([0, r]),
    y = d3.scale.linear().range([0, r]),
    node,
    root;

var pack = d3.layout.pack()
    .size([r, r])
    .value(function(d) { return 10; })

var vis = d3.select("#chart").insert("svg:svg", "h2")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(" + (w - r) / 2 + "," + (h - r) / 2 + ")");


  node = root = data;

  var nodes = pack.nodes(root);

  vis.selectAll("circle")
      .data(nodes)
    .enter().append("svg:circle")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return d.r; })
      .on("click", function(d) { return zoom(node == d ? root : d); });

  vis.selectAll("text")
      .data(nodes)
    .enter().append("svg:text")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
      .text(function(d) { return d.name; });

  d3.select(window).on("click", function() { zoom(root); });


function zoom(d, i) {
  var k = r / d.r / 2;
  x.domain([d.x - d.r, d.x + d.r]);
  y.domain([d.y - d.r, d.y + d.r]);

  var t = vis.transition()
      .duration(d3.event.altKey ? 7500 : 750);

  t.selectAll("circle")
      .attr("cx", function(d) { return x(d.x); })
      .attr("cy", function(d) { return y(d.y); })
      .attr("r", function(d) { return k * d.r; });

  t.selectAll("text")
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y); })
      .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });

  node = d;
  d3.event.stopPropagation();
}*/

</script>
<% end %>