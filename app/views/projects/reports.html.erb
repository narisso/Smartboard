<h1>Reports</h1>

<div class="row use_cases">
	<div class="span4" style="border: thin solid #CCC">
		<p>Form</p>
    <p><%= reports_hours_users_project_path(@project) %>.json</p>
	</div>
	<div class="span8" style="border: thin solid #CCC; min-height: 500px;" id="chart">		
		
	</div>
</div>

<% content_for :javascripts do %>
<style>

/*=====================================
// SIMPLE BAR CHART
//=====================================*/
/*.bar {
  fill: steelblue;
}

.bar:hover {
  fill: brown;
}

.axis {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}*/

/*=====================================
// HIERARCHY PACK
//=====================================*/

/*#chart{
  overflow: scroll;
}

text {
  font-size: 11px;
  pointer-events: none;
}

text.parent {
  fill: #1f77b4;
}

circle {
  fill: #ccc;
  stroke: #999;
  pointer-events: all;
}

circle.parent {
  fill: #1f77b4;
  fill-opacity: .1;
  stroke: steelblue;
}

circle.parent:hover {
  stroke: #ff7f0e;
  stroke-width: .5px;
}

circle.child {
  pointer-events: none;
}*/

/*=====================================
// COLLAPSE TREE
//=====================================*/

/*
.node circle {
  cursor: pointer;
  fill: #fff;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.node text {
  font-size: 11px;
}

path.link {
  fill: none;
  stroke: #ccc;
  stroke-width: 1.5px;
}*/

/*=====================================
// HIERARCHY BARS
//=====================================*/

text {
  font: 10px sans-serif;
}

rect.background {
  fill: white;
}

.axis {
  shape-rendering: crispEdges;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
}

    

</style>

<script type="text/javascript">

//=====================================
// SIMPLE BAR CHART
//=====================================

/*var dataString = "[{\"key\": \"N. Risso\", \"val\": 10},{\"key\": \"S. Larrain\", \"val\": 12}, {\"key\": \"V. Ibaseta\", \"val\": 13}, {\"key\": \"N. Escobar\", \"val\": 13}, {\"key\": \"J. Vergara\", \"val\": 15}]";

var data = JSON.parse(dataString);

var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var margin = {top: 40, right: 20, bottom: 30, left: 40},
    width  = actualWidth - margin.left - margin.right,
    height = actualHeight - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

x.domain(data.map(function(d){ return d.key}));
y.domain([0, d3.max(data.map(function(d){ return d.val}))]);

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Value");

svg.selectAll(".bar")
    .data(data)
  .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return x(d.key); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d.val); })
    .attr("height", function(d) { return height - y(d.val); })*/


//==================
// HIERARCHY PACK
//==================
/*
var dataString = "{ \"name\": \"flare\", \"children\": [  {   \"name\": \"analytics\",   \"children\": [    {     \"name\": \"cluster\",     \"children\": [      {\"name\": \"AgglomerativeCluster\"},      {\"name\": \"CommunityStructure\"},      {\"name\": \"HierarchicalCluster\"},      {\"name\": \"MergeEdge\"}     ]    },    {     \"name\": \"graph\",     \"children\": [      {\"name\": \"BetweennessCentrality\"},      {\"name\": \"LinkDistance\"},      {\"name\": \"MaxFlowMinCut\"},      {\"name\": \"ShortestPaths\"},      {\"name\": \"SpanningTree\"}     ]    },    {     \"name\": \"optimization\",     \"children\": [      {\"name\": \"AspectRatioBanker\"}     ]    }   ]  },  {   \"name\": \"animate\",   \"children\": [    {\"name\": \"Easing\"},    {\"name\": \"FunctionSequence\"},    {     \"name\": \"interpolate\",     \"children\": [      {\"name\": \"ArrayInterpolator\"},      {\"name\": \"ColorInterpolator\"},      {\"name\": \"DateInterpolator\"},      {\"name\": \"Interpolator\"},      {\"name\": \"MatrixInterpolator\"},      {\"name\": \"NumberInterpolator\"},      {\"name\": \"ObjectInterpolator\"},      {\"name\": \"PointInterpolator\"},      {\"name\": \"RectangleInterpolator\"}     ]    },    {\"name\": \"ISchedulable\"},    {\"name\": \"Parallel\"},    {\"name\": \"Pause\"},    {\"name\": \"Scheduler\"},    {\"name\": \"Sequence\"},    {\"name\": \"Transition\"},    {\"name\": \"Transitioner\"},    {\"name\": \"TransitionEvent\"},    {\"name\": \"Tween\"}   ]  },  {   \"name\": \"data\",   \"children\": [    {     \"name\": \"converters\",     \"children\": [      {\"name\": \"Converters\"},      {\"name\": \"DelimitedTextConverter\"},      {\"name\": \"GraphMLConverter\"},      {\"name\": \"IDataConverter\"},      {\"name\": \"JSONConverter\"}     ]    },    {\"name\": \"DataField\"},    {\"name\": \"DataSchema\"},    {\"name\": \"DataSet\"},    {\"name\": \"DataSource\"},    {\"name\": \"DataTable\"},    {\"name\": \"DataUtil\"}   ]  },  {   \"name\": \"display\",   \"children\": [    {\"name\": \"DirtySprite\"},    {\"name\": \"LineSprite\"},    {\"name\": \"RectSprite\"},    {\"name\": \"TextSprite\"}   ]  },  {   \"name\": \"flex\",   \"children\": [    {\"name\": \"FlareVis\"}   ]  },  {   \"name\": \"physics\",   \"children\": [    {\"name\": \"DragForce\"},    {\"name\": \"GravityForce\"},    {\"name\": \"IForce\"},    {\"name\": \"NBodyForce\"},    {\"name\": \"Particle\"},    {\"name\": \"Simulation\"},    {\"name\": \"Spring\"},    {\"name\": \"SpringForce\"}   ]  },  {   \"name\": \"query\",   \"children\": [    {\"name\": \"AggregateExpression\"},    {\"name\": \"And\"},    {\"name\": \"Arithmetic\"},    {\"name\": \"Average\"},    {\"name\": \"BinaryExpression\"},    {\"name\": \"Comparison\"},    {\"name\": \"CompositeExpression\"},    {\"name\": \"Count\"},    {\"name\": \"DateUtil\"},    {\"name\": \"Distinct\"},    {\"name\": \"Expression\"},    {\"name\": \"ExpressionIterator\"},    {\"name\": \"Fn\"},    {\"name\": \"If\"},    {\"name\": \"IsA\"},    {\"name\": \"Literal\"},    {\"name\": \"Match\"},    {\"name\": \"Maximum\"},    {     \"name\": \"methods\",     \"children\": [      {\"name\": \"add\"},      {\"name\": \"and\"},      {\"name\": \"average\"},      {\"name\": \"count\"},      {\"name\": \"distinct\"},      {\"name\": \"div\"},      {\"name\": \"eq\"},      {\"name\": \"fn\"},      {\"name\": \"gt\"},      {\"name\": \"gte\"},      {\"name\": \"iff\"},      {\"name\": \"isa\"},      {\"name\": \"lt\"},      {\"name\": \"lte\"},      {\"name\": \"max\"},      {\"name\": \"min\"},      {\"name\": \"mod\"},      {\"name\": \"mul\"},      {\"name\": \"neq\"},      {\"name\": \"not\"},      {\"name\": \"or\"},      {\"name\": \"orderby\"},      {\"name\": \"range\"},      {\"name\": \"select\"},      {\"name\": \"stddev\"},      {\"name\": \"sub\"},      {\"name\": \"sum\"},      {\"name\": \"update\"},      {\"name\": \"variance\"},      {\"name\": \"where\"},      {\"name\": \"xor\"},      {\"name\": \"_\"}     ]    },    {\"name\": \"Minimum\"},    {\"name\": \"Not\"},    {\"name\": \"Or\"},    {\"name\": \"Query\"},    {\"name\": \"Range\"},    {\"name\": \"StringUtil\"},    {\"name\": \"Sum\"},    {\"name\": \"Variable\"},    {\"name\": \"Variance\"},    {\"name\": \"Xor\"}   ]  },  {   \"name\": \"scale\",   \"children\": [    {\"name\": \"IScaleMap\"},    {\"name\": \"LinearScale\"},    {\"name\": \"LogScale\"},    {\"name\": \"OrdinalScale\"},    {\"name\": \"QuantileScale\"},    {\"name\": \"QuantitativeScale\"},    {\"name\": \"RootScale\"},    {\"name\": \"Scale\"},    {\"name\": \"ScaleType\"},    {\"name\": \"TimeScale\"}   ]  },  {   \"name\": \"util\",   \"children\": [    {\"name\": \"Arrays\"},    {\"name\": \"Colors\"},    {\"name\": \"Dates\"},    {\"name\": \"Displays\"},    {\"name\": \"Filter\"},    {\"name\": \"Geometry\"},    {     \"name\": \"heap\",     \"children\": [      {\"name\": \"FibonacciHeap\"},      {\"name\": \"HeapNode\"}     ]    },    {\"name\": \"IEvaluable\"},    {\"name\": \"IPredicate\"},    {\"name\": \"IValueProxy\"},    {     \"name\": \"math\",     \"children\": [      {\"name\": \"DenseMatrix\"},      {\"name\": \"IMatrix\"},      {\"name\": \"SparseMatrix\"}     ]    },    {\"name\": \"Maths\"},    {\"name\": \"Orientation\"},    {     \"name\": \"palette\",     \"children\": [      {\"name\": \"ColorPalette\"},      {\"name\": \"Palette\"},      {\"name\": \"ShapePalette\"},      {\"name\": \"SizePalette\"}     ]    },    {\"name\": \"Property\"},    {\"name\": \"Shapes\"},    {\"name\": \"Sort\"},    {\"name\": \"Stats\"},    {\"name\": \"Strings\"}   ]  },  {   \"name\": \"vis\",   \"children\": [    {     \"name\": \"axis\",     \"children\": [      {\"name\": \"Axes\"},      {\"name\": \"Axis\"},      {\"name\": \"AxisGridLine\"},      {\"name\": \"AxisLabel\"},      {\"name\": \"CartesianAxes\"}     ]    },    {     \"name\": \"controls\",     \"children\": [      {\"name\": \"AnchorControl\"},      {\"name\": \"ClickControl\"},      {\"name\": \"Control\"},      {\"name\": \"ControlList\"},      {\"name\": \"DragControl\"},      {\"name\": \"ExpandControl\"},      {\"name\": \"HoverControl\"},      {\"name\": \"IControl\"},      {\"name\": \"PanZoomControl\"},      {\"name\": \"SelectionControl\"},      {\"name\": \"TooltipControl\"}     ]    },    {     \"name\": \"data\",     \"children\": [      {\"name\": \"Data\"},      {\"name\": \"DataList\"},      {\"name\": \"DataSprite\"},      {\"name\": \"EdgeSprite\"},      {\"name\": \"NodeSprite\"},      {       \"name\": \"render\",       \"children\": [        {\"name\": \"ArrowType\"},        {\"name\": \"EdgeRenderer\"},        {\"name\": \"IRenderer\"},        {\"name\": \"ShapeRenderer\"}       ]      },      {\"name\": \"ScaleBinding\"},      {\"name\": \"Tree\"},      {\"name\": \"TreeBuilder\"}     ]    },    {     \"name\": \"events\",     \"children\": [      {\"name\": \"DataEvent\"},      {\"name\": \"SelectionEvent\"},      {\"name\": \"TooltipEvent\"},      {\"name\": \"VisualizationEvent\"}     ]    },    {     \"name\": \"legend\",     \"children\": [      {\"name\": \"Legend\"},      {\"name\": \"LegendItem\"},      {\"name\": \"LegendRange\"}     ]    },    {     \"name\": \"operator\",     \"children\": [      {       \"name\": \"distortion\",       \"children\": [        {\"name\": \"BifocalDistortion\"},        {\"name\": \"Distortion\"},        {\"name\": \"FisheyeDistortion\"}       ]      },      {       \"name\": \"encoder\",       \"children\": [        {\"name\": \"ColorEncoder\"},        {\"name\": \"Encoder\"},        {\"name\": \"PropertyEncoder\"},        {\"name\": \"ShapeEncoder\"},        {\"name\": \"SizeEncoder\"}       ]      },      {       \"name\": \"filter\",       \"children\": [        {\"name\": \"FisheyeTreeFilter\"},        {\"name\": \"GraphDistanceFilter\"},        {\"name\": \"VisibilityFilter\"}       ]      },      {\"name\": \"IOperator\"},      {       \"name\": \"label\",       \"children\": [        {\"name\": \"Labeler\"},        {\"name\": \"RadialLabeler\"},        {\"name\": \"StackedAreaLabeler\"}       ]      },      {       \"name\": \"layout\",       \"children\": [        {\"name\": \"AxisLayout\"},        {\"name\": \"BundledEdgeRouter\"},        {\"name\": \"CircleLayout\"},        {\"name\": \"CirclePackingLayout\"},        {\"name\": \"DendrogramLayout\"},        {\"name\": \"ForceDirectedLayout\"},        {\"name\": \"IcicleTreeLayout\"},        {\"name\": \"IndentedTreeLayout\"},        {\"name\": \"Layout\"},        {\"name\": \"NodeLinkTreeLayout\"},        {\"name\": \"PieLayout\"},        {\"name\": \"RadialTreeLayout\"},        {\"name\": \"RandomLayout\"},        {\"name\": \"StackedAreaLayout\"},        {\"name\": \"TreeMapLayout\"}       ]      },      {\"name\": \"Operator\"},      {\"name\": \"OperatorList\"},      {\"name\": \"OperatorSequence\"},      {\"name\": \"OperatorSwitch\"},      {\"name\": \"SortOperator\"}     ]    },    {\"name\": \"Visualization\"}   ]  } ]}";
var data = JSON.parse(dataString);

/*var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var w = actualWidth,
    h = actualHeight,
    r = d3.min([w, h]),
    x = d3.scale.linear().range([0, r]),
    y = d3.scale.linear().range([0, r]),
    node,
    root;

var pack = d3.layout.pack()
    .size([r, r])
    .value(function(d) { return 10; })

var vis = d3.select("#chart").insert("svg:svg", "h2")
    .attr("width", w)
    .attr("height", h)
  .append("svg:g")
    .attr("transform", "translate(" + (w - r) / 2 + "," + (h - r) / 2 + ")");


  node = root = data;

  var nodes = pack.nodes(root);

  vis.selectAll("circle")
      .data(nodes)
    .enter().append("svg:circle")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return d.r; })
      .on("click", function(d) { return zoom(node == d ? root : d); });

  vis.selectAll("text")
      .data(nodes)
    .enter().append("svg:text")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
      .text(function(d) { return d.name; });

  d3.select(window).on("click", function() { zoom(root); });


function zoom(d, i) {
  var k = r / d.r / 2;
  x.domain([d.x - d.r, d.x + d.r]);
  y.domain([d.y - d.r, d.y + d.r]);

  var t = vis.transition()
      .duration(d3.event.altKey ? 7500 : 750);

  t.selectAll("circle")
      .attr("cx", function(d) { return x(d.x); })
      .attr("cy", function(d) { return y(d.y); })
      .attr("r", function(d) { return k * d.r; });

  t.selectAll("text")
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y); })
      .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });

  node = d;
  d3.event.stopPropagation();
}*/

//==================
// Collapse Tree
//==================

/*var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var m = [20, 120, 20, 50],
    w = actualWidth,
    h = actualHeight,
    i = 0,
    root;

var tree = d3.layout.tree()
    .size([h, w]);

var diagonal = d3.svg.diagonal()
    .projection(function(d) { return [d.y, d.x]; });

var vis = d3.select("#chart").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");


  root = data;
  root.x0 = h / 2;
  root.y0 = 0;

  function toggleAll(d) {
    if (d.children) {
      d.children.forEach(toggleAll);
      toggle(d);
    }
  }

  // Initialize the display to show a few nodes.
  root.children.forEach(toggleAll);
  toggle(root.children[1]);
  toggle(root.children[1].children[2]);
  toggle(root.children[9]);
  toggle(root.children[9].children[0]);

  update(root);


function update(source) {
  var duration = d3.event && d3.event.altKey ? 5000 : 500;

  // Compute the new tree layout.
  var nodes = tree.nodes(root).reverse();

  // Normalize for fixed-depth.
  nodes.forEach(function(d) { d.y = d.depth * 180; });

  // Update the nodes…
  var node = vis.selectAll("g.node")
      .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter any new nodes at the parent's previous position.
  var nodeEnter = node.enter().append("svg:g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
      .on("click", function(d) { toggle(d); update(d); });

  nodeEnter.append("svg:circle")
      .attr("r", 1e-6)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeEnter.append("svg:text")
      .attr("x", function(d) { return d.children || d._children ? -10 : 10; })
      .attr("dy", ".35em")
      .attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; })
      .text(function(d) { return d.name; })
      .style("fill-opacity", 1e-6);

  // Transition nodes to their new position.
  var nodeUpdate = node.transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

  nodeUpdate.select("circle")
      .attr("r", 4.5)
      .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

  nodeUpdate.select("text")
      .style("fill-opacity", 1);

  // Transition exiting nodes to the parent's new position.
  var nodeExit = node.exit().transition()
      .duration(duration)
      .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
      .remove();

  nodeExit.select("circle")
      .attr("r", 1e-6);

  nodeExit.select("text")
      .style("fill-opacity", 1e-6);

  // Update the links…
  var link = vis.selectAll("path.link")
      .data(tree.links(nodes), function(d) { return d.target.id; });

  // Enter any new links at the parent's previous position.
  link.enter().insert("svg:path", "g")
      .attr("class", "link")
      .attr("d", function(d) {
        var o = {x: source.x0, y: source.y0};
        return diagonal({source: o, target: o});
      })
    .transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition links to their new position.
  link.transition()
      .duration(duration)
      .attr("d", diagonal);

  // Transition exiting nodes to the parent's new position.
  link.exit().transition()
      .duration(duration)
      .attr("d", function(d) {
        var o = {x: source.x, y: source.y};
        return diagonal({source: o, target: o});
      })
      .remove();

  // Stash the old positions for transition.
  nodes.forEach(function(d) {
    d.x0 = d.x;
    d.y0 = d.y;
  });
}

// Toggle children.
function toggle(d) {
  if (d.children) {
    d._children = d.children;
    d.children = null;
  } else {
    d.children = d._children;
    d._children = null;
  }
}*/

//==================
// Hierarchy bar
//==================
var dataString = "{ \"name\": \"flare\", \"children\": [  {   \"name\": \"analytics\",   \"children\": [    {     \"name\": \"cluster\",     \"children\": [      {\"name\": \"AgglomerativeCluster\", \"size\": 3938},      {\"name\": \"CommunityStructure\", \"size\": 3812},      {\"name\": \"HierarchicalCluster\", \"size\": 6714},      {\"name\": \"MergeEdge\", \"size\": 743}     ]    },    {     \"name\": \"graph\",     \"children\": [      {\"name\": \"BetweennessCentrality\", \"size\": 3534},      {\"name\": \"LinkDistance\", \"size\": 5731},      {\"name\": \"MaxFlowMinCut\", \"size\": 7840},      {\"name\": \"ShortestPaths\", \"size\": 5914},      {\"name\": \"SpanningTree\", \"size\": 3416}     ]    },    {     \"name\": \"optimization\",     \"children\": [      {\"name\": \"AspectRatioBanker\", \"size\": 7074}     ]    }   ]  },  {   \"name\": \"animate\",   \"children\": [    {\"name\": \"Easing\", \"size\": 17010},    {\"name\": \"FunctionSequence\", \"size\": 5842},    {     \"name\": \"interpolate\",     \"children\": [      {\"name\": \"ArrayInterpolator\", \"size\": 1983},      {\"name\": \"ColorInterpolator\", \"size\": 2047},      {\"name\": \"DateInterpolator\", \"size\": 1375},      {\"name\": \"Interpolator\", \"size\": 8746},      {\"name\": \"MatrixInterpolator\", \"size\": 2202},      {\"name\": \"NumberInterpolator\", \"size\": 1382},      {\"name\": \"ObjectInterpolator\", \"size\": 1629},      {\"name\": \"PointInterpolator\", \"size\": 1675},      {\"name\": \"RectangleInterpolator\", \"size\": 2042}     ]    },    {\"name\": \"ISchedulable\", \"size\": 1041},    {\"name\": \"Parallel\", \"size\": 5176},    {\"name\": \"Pause\", \"size\": 449},    {\"name\": \"Scheduler\", \"size\": 5593},    {\"name\": \"Sequence\", \"size\": 5534},    {\"name\": \"Transition\", \"size\": 9201},    {\"name\": \"Transitioner\", \"size\": 19975},    {\"name\": \"TransitionEvent\", \"size\": 1116},    {\"name\": \"Tween\", \"size\": 6006}   ]  },  {   \"name\": \"data\",   \"children\": [    {     \"name\": \"converters\",     \"children\": [      {\"name\": \"Converters\", \"size\": 721},      {\"name\": \"DelimitedTextConverter\", \"size\": 4294},      {\"name\": \"GraphMLConverter\", \"size\": 9800},      {\"name\": \"IDataConverter\", \"size\": 1314},      {\"name\": \"JSONConverter\", \"size\": 2220}     ]    },    {\"name\": \"DataField\", \"size\": 1759},    {\"name\": \"DataSchema\", \"size\": 2165},    {\"name\": \"DataSet\", \"size\": 586},    {\"name\": \"DataSource\", \"size\": 3331},    {\"name\": \"DataTable\", \"size\": 772},    {\"name\": \"DataUtil\", \"size\": 3322}   ]  },  {   \"name\": \"display\",   \"children\": [    {\"name\": \"DirtySprite\", \"size\": 8833},    {\"name\": \"LineSprite\", \"size\": 1732},    {\"name\": \"RectSprite\", \"size\": 3623},    {\"name\": \"TextSprite\", \"size\": 10066}   ]  },  {   \"name\": \"flex\",   \"children\": [    {\"name\": \"FlareVis\", \"size\": 4116}   ]  },  {   \"name\": \"physics\",   \"children\": [    {\"name\": \"DragForce\", \"size\": 1082},    {\"name\": \"GravityForce\", \"size\": 1336},    {\"name\": \"IForce\", \"size\": 319},    {\"name\": \"NBodyForce\", \"size\": 10498},    {\"name\": \"Particle\", \"size\": 2822},    {\"name\": \"Simulation\", \"size\": 9983},    {\"name\": \"Spring\", \"size\": 2213},    {\"name\": \"SpringForce\", \"size\": 1681}   ]  },  {   \"name\": \"query\",   \"children\": [    {\"name\": \"AggregateExpression\", \"size\": 1616},    {\"name\": \"And\", \"size\": 1027},    {\"name\": \"Arithmetic\", \"size\": 3891},    {\"name\": \"Average\", \"size\": 891},    {\"name\": \"BinaryExpression\", \"size\": 2893},    {\"name\": \"Comparison\", \"size\": 5103},    {\"name\": \"CompositeExpression\", \"size\": 3677},    {\"name\": \"Count\", \"size\": 781},    {\"name\": \"DateUtil\", \"size\": 4141},    {\"name\": \"Distinct\", \"size\": 933},    {\"name\": \"Expression\", \"size\": 5130},    {\"name\": \"ExpressionIterator\", \"size\": 3617},    {\"name\": \"Fn\", \"size\": 3240},    {\"name\": \"If\", \"size\": 2732},    {\"name\": \"IsA\", \"size\": 2039},    {\"name\": \"Literal\", \"size\": 1214},    {\"name\": \"Match\", \"size\": 3748},    {\"name\": \"Maximum\", \"size\": 843},    {     \"name\": \"methods\",     \"children\": [      {\"name\": \"add\", \"size\": 593},      {\"name\": \"and\", \"size\": 330},      {\"name\": \"average\", \"size\": 287},      {\"name\": \"count\", \"size\": 277},      {\"name\": \"distinct\", \"size\": 292},      {\"name\": \"div\", \"size\": 595},      {\"name\": \"eq\", \"size\": 594},      {\"name\": \"fn\", \"size\": 460},      {\"name\": \"gt\", \"size\": 603},      {\"name\": \"gte\", \"size\": 625},      {\"name\": \"iff\", \"size\": 748},      {\"name\": \"isa\", \"size\": 461},      {\"name\": \"lt\", \"size\": 597},      {\"name\": \"lte\", \"size\": 619},      {\"name\": \"max\", \"size\": 283},      {\"name\": \"min\", \"size\": 283},      {\"name\": \"mod\", \"size\": 591},      {\"name\": \"mul\", \"size\": 603},      {\"name\": \"neq\", \"size\": 599},      {\"name\": \"not\", \"size\": 386},      {\"name\": \"or\", \"size\": 323},      {\"name\": \"orderby\", \"size\": 307},      {\"name\": \"range\", \"size\": 772},      {\"name\": \"select\", \"size\": 296},      {\"name\": \"stddev\", \"size\": 363},      {\"name\": \"sub\", \"size\": 600},      {\"name\": \"sum\", \"size\": 280},      {\"name\": \"update\", \"size\": 307},      {\"name\": \"variance\", \"size\": 335},      {\"name\": \"where\", \"size\": 299},      {\"name\": \"xor\", \"size\": 354},      {\"name\": \"_\", \"size\": 264}     ]    },    {\"name\": \"Minimum\", \"size\": 843},    {\"name\": \"Not\", \"size\": 1554},    {\"name\": \"Or\", \"size\": 970},    {\"name\": \"Query\", \"size\": 13896},    {\"name\": \"Range\", \"size\": 1594},    {\"name\": \"StringUtil\", \"size\": 4130},    {\"name\": \"Sum\", \"size\": 791},    {\"name\": \"Variable\", \"size\": 1124},    {\"name\": \"Variance\", \"size\": 1876},    {\"name\": \"Xor\", \"size\": 1101}   ]  },  {   \"name\": \"scale\",   \"children\": [    {\"name\": \"IScaleMap\", \"size\": 2105},    {\"name\": \"LinearScale\", \"size\": 1316},    {\"name\": \"LogScale\", \"size\": 3151},    {\"name\": \"OrdinalScale\", \"size\": 3770},    {\"name\": \"QuantileScale\", \"size\": 2435},    {\"name\": \"QuantitativeScale\", \"size\": 4839},    {\"name\": \"RootScale\", \"size\": 1756},    {\"name\": \"Scale\", \"size\": 4268},    {\"name\": \"ScaleType\", \"size\": 1821},    {\"name\": \"TimeScale\", \"size\": 5833}   ]  },  {   \"name\": \"util\",   \"children\": [    {\"name\": \"Arrays\", \"size\": 8258},    {\"name\": \"Colors\", \"size\": 10001},    {\"name\": \"Dates\", \"size\": 8217},    {\"name\": \"Displays\", \"size\": 12555},    {\"name\": \"Filter\", \"size\": 2324},    {\"name\": \"Geometry\", \"size\": 10993},    {     \"name\": \"heap\",     \"children\": [      {\"name\": \"FibonacciHeap\", \"size\": 9354},      {\"name\": \"HeapNode\", \"size\": 1233}     ]    },    {\"name\": \"IEvaluable\", \"size\": 335},    {\"name\": \"IPredicate\", \"size\": 383},    {\"name\": \"IValueProxy\", \"size\": 874},    {     \"name\": \"math\",     \"children\": [      {\"name\": \"DenseMatrix\", \"size\": 3165},      {\"name\": \"IMatrix\", \"size\": 2815},      {\"name\": \"SparseMatrix\", \"size\": 3366}     ]    },    {\"name\": \"Maths\", \"size\": 17705},    {\"name\": \"Orientation\", \"size\": 1486},    {     \"name\": \"palette\",     \"children\": [      {\"name\": \"ColorPalette\", \"size\": 6367},      {\"name\": \"Palette\", \"size\": 1229},      {\"name\": \"ShapePalette\", \"size\": 2059},      {\"name\": \"SizePalette\", \"size\": 2291}     ]    },    {\"name\": \"Property\", \"size\": 5559},    {\"name\": \"Shapes\", \"size\": 19118},    {\"name\": \"Sort\", \"size\": 6887},    {\"name\": \"Stats\", \"size\": 6557},    {\"name\": \"Strings\", \"size\": 22026}   ]  },  {   \"name\": \"Nicolas\",   \"children\": [    {     \"name\": \"axis\",     \"children\": [      {\"name\": \"Axes\", \"size\": 1302},      {\"name\": \"Axis\", \"size\": 24593},      {\"name\": \"AxisGridLine\", \"size\": 652},      {\"name\": \"AxisLabel\", \"size\": 636},      {\"name\": \"CartesianAxes\", \"size\": 6703}     ]    },    {     \"name\": \"controls\",     \"children\": [      {\"name\": \"AnchorControl\", \"size\": 2138},      {\"name\": \"ClickControl\", \"size\": 3824},      {\"name\": \"Control\", \"size\": 1353},      {\"name\": \"ControlList\", \"size\": 4665},      {\"name\": \"DragControl\", \"size\": 2649},      {\"name\": \"ExpandControl\", \"size\": 2832},      {\"name\": \"HoverControl\", \"size\": 4896},      {\"name\": \"IControl\", \"size\": 763},      {\"name\": \"PanZoomControl\", \"size\": 5222},      {\"name\": \"SelectionControl\", \"size\": 7862},      {\"name\": \"TooltipControl\", \"size\": 8435}     ]    },    {     \"name\": \"data\",     \"children\": [      {\"name\": \"Data\", \"size\": 20544},      {\"name\": \"DataList\", \"size\": 19788},      {\"name\": \"DataSprite\", \"size\": 10349},      {\"name\": \"EdgeSprite\", \"size\": 3301},      {\"name\": \"NodeSprite\", \"size\": 19382},      {       \"name\": \"render\",       \"children\": [        {\"name\": \"ArrowType\", \"size\": 698},        {\"name\": \"EdgeRenderer\", \"size\": 5569},        {\"name\": \"IRenderer\", \"size\": 353},        {\"name\": \"ShapeRenderer\", \"size\": 2247}       ]      },      {\"name\": \"ScaleBinding\", \"size\": 11275},      {\"name\": \"Tree\", \"size\": 7147},      {\"name\": \"TreeBuilder\", \"size\": 9930}     ]    },    {     \"name\": \"events\",     \"children\": [      {\"name\": \"DataEvent\", \"size\": 2313},      {\"name\": \"SelectionEvent\", \"size\": 1880},      {\"name\": \"TooltipEvent\", \"size\": 1701},      {\"name\": \"VisualizationEvent\", \"size\": 1117}     ]    },    {     \"name\": \"legend\",     \"children\": [      {\"name\": \"Legend\", \"size\": 20859},      {\"name\": \"LegendItem\", \"size\": 4614},      {\"name\": \"LegendRange\", \"size\": 10530}     ]    },    {     \"name\": \"operator\",     \"children\": [      {       \"name\": \"distortion\",       \"children\": [        {\"name\": \"BifocalDistortion\", \"size\": 4461},        {\"name\": \"Distortion\", \"size\": 6314},        {\"name\": \"FisheyeDistortion\", \"size\": 3444}       ]      },      {       \"name\": \"encoder\",       \"children\": [        {\"name\": \"ColorEncoder\", \"size\": 3179},        {\"name\": \"Encoder\", \"size\": 4060},        {\"name\": \"PropertyEncoder\", \"size\": 4138},        {\"name\": \"ShapeEncoder\", \"size\": 1690},        {\"name\": \"SizeEncoder\", \"size\": 1830}       ]      },      {       \"name\": \"filter\",       \"children\": [        {\"name\": \"FisheyeTreeFilter\", \"size\": 5219},        {\"name\": \"GraphDistanceFilter\", \"size\": 3165},        {\"name\": \"VisibilityFilter\", \"size\": 3509}       ]      },      {\"name\": \"IOperator\", \"size\": 1286},      {       \"name\": \"label\",       \"children\": [        {\"name\": \"Labeler\", \"size\": 9956},        {\"name\": \"RadialLabeler\", \"size\": 3899},        {\"name\": \"StackedAreaLabeler\", \"size\": 3202}       ]      },      {       \"name\": \"layout\",       \"children\": [        {\"name\": \"AxisLayout\", \"size\": 6725},        {\"name\": \"BundledEdgeRouter\", \"size\": 3727},        {\"name\": \"CircleLayout\", \"size\": 9317},        {\"name\": \"CirclePackingLayout\", \"size\": 12003},        {\"name\": \"DendrogramLayout\", \"size\": 4853},        {\"name\": \"ForceDirectedLayout\", \"size\": 8411},        {\"name\": \"IcicleTreeLayout\", \"size\": 4864},        {\"name\": \"IndentedTreeLayout\", \"size\": 3174},        {\"name\": \"Layout\", \"size\": 7881},        {\"name\": \"NodeLinkTreeLayout\", \"size\": 12870},        {\"name\": \"PieLayout\", \"size\": 2728},        {\"name\": \"RadialTreeLayout\", \"size\": 12348},        {\"name\": \"RandomLayout\", \"size\": 870},        {\"name\": \"StackedAreaLayout\", \"size\": 9121},        {\"name\": \"TreeMapLayout\", \"size\": 9191}       ]      },      {\"name\": \"Operator\", \"size\": 2490},      {\"name\": \"OperatorList\", \"size\": 5248},      {\"name\": \"OperatorSequence\", \"size\": 4190},      {\"name\": \"OperatorSwitch\", \"size\": 2581},      {\"name\": \"SortOperator\", \"size\": 2023}     ]    },    {\"name\": \"Visualization\", \"size\": 16540}   ]  } ]}";
var data = JSON.parse(dataString);

var actualWidth = $("#chart").width();
var actualHeight = $("#chart").height();

var m = [30, 40, 20, 120], // top right bottom left
    w = actualWidth - m[1] - m[3], // width
    h = actualHeight - m[0] - m[2], // height
    x = d3.scale.linear().range([0, w]),
    y = 20, // bar height
    z = d3.scale.ordinal().range(["steelblue", "#ccc"]), // bar color
    duration = 750,
    delay = 25;

var hierarchy = d3.layout.partition()
    .value(function(d) { return d.size; });

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("top");

var svg = d3.select("#chart").append("svg:svg")
    .attr("width", w + m[1] + m[3])
    .attr("height", h + m[0] + m[2])
  .append("svg:g")
    .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

svg.append("svg:rect")
    .attr("class", "background")
    .attr("width", w)
    .attr("height", h)
    .on("click", up);

svg.append("svg:g")
    .attr("class", "x axis");

svg.append("svg:g")
    .attr("class", "y axis")
  .append("svg:line")
    .attr("y1", "100%");

d3.json("<%= reports_hours_users_project_path(@project) %>.json", function(root)
{
  hierarchy.nodes(root);
  x.domain([0, root.value]).nice();
  down(root, 0);

});
  
  

function down(d, i) {
  if (!d.children || this.__transition__) return;
  var end = duration + d.children.length * delay;

  // Mark any currently-displayed bars as exiting.
  var exit = svg.selectAll(".enter").attr("class", "exit");

  // Entering nodes immediately obscure the clicked-on bar, so hide it.
  exit.selectAll("rect").filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);

  // Enter the new bars for the clicked-on data.
  // Per above, entering bars are immediately visible.
  var enter = bar(d)
      .attr("transform", stack(i))
      .style("opacity", 1);

  // Have the text fade-in, even though the bars are visible.
  // Color the bars as parents; they will fade to children if appropriate.
  enter.select("text").style("fill-opacity", 1e-6);
  enter.select("rect").style("fill", z(true));

  // Update the x-scale domain.
  x.domain([0, d3.max(d.children, function(d) { return d.value; })]).nice();

  // Update the x-axis.
  svg.selectAll(".x.axis").transition().duration(duration).call(xAxis);

  // Transition entering bars to their new position.
  var enterTransition = enter.transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; });

  // Transition entering text.
  enterTransition.select("text").style("fill-opacity", 1);

  // Transition entering rects to the new x-scale.
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", function(d) { return z(!!d.children); });

  // Transition exiting bars to fade out.
  var exitTransition = exit.transition()
      .duration(duration)
      .style("opacity", 1e-6)
      .remove();

  // Transition exiting bars to the new x-scale.
  exitTransition.selectAll("rect").attr("width", function(d) { return x(d.value); });

  // Rebind the current node to the background.
  svg.select(".background").data([d]).transition().duration(end); d.index = i;
}

function up(d) {
  if (!d.parent || this.__transition__) return;
  var end = duration + d.children.length * delay;

  // Mark any currently-displayed bars as exiting.
  var exit = svg.selectAll(".enter").attr("class", "exit");

  // Enter the new bars for the clicked-on data's parent.
  var enter = bar(d.parent)
      .attr("transform", function(d, i) { return "translate(0," + y * i * 1.2 + ")"; })
      .style("opacity", 1e-6);

  // Color the bars as appropriate.
  // Exiting nodes will obscure the parent bar, so hide it.
  enter.select("rect")
      .style("fill", function(d) { return z(!!d.children); })
    .filter(function(p) { return p === d; })
      .style("fill-opacity", 1e-6);

  // Update the x-scale domain.
  x.domain([0, d3.max(d.parent.children, function(d) { return d.value; })]).nice();

  // Update the x-axis.
  svg.selectAll(".x.axis").transition().duration(duration).call(xAxis);

  // Transition entering bars to fade in over the full duration.
  var enterTransition = enter.transition()
      .duration(end)
      .style("opacity", 1);

  // Transition entering rects to the new x-scale.
  // When the entering parent rect is done, make it visible!
  enterTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .each("end", function(p) { if (p === d) d3.select(this).style("fill-opacity", null); });

  // Transition exiting bars to the parent's position.
  var exitTransition = exit.selectAll("g").transition()
      .duration(duration)
      .delay(function(d, i) { return i * delay; })
      .attr("transform", stack(d.index));

  // Transition exiting text to fade out.
  exitTransition.select("text")
      .style("fill-opacity", 1e-6);

  // Transition exiting rects to the new scale and fade to parent color.
  exitTransition.select("rect")
      .attr("width", function(d) { return x(d.value); })
      .style("fill", z(true));

  // Remove exiting nodes when the last child has finished transitioning.
  exit.transition().duration(end).remove();

  // Rebind the current parent to the background.
  svg.select(".background").data([d.parent]).transition().duration(end);;
}

// Creates a set of bars for the given data node, at the specified index.
function bar(d) {
  var bar = svg.insert("svg:g", ".y.axis")
      .attr("class", "enter")
      .attr("transform", "translate(0,5)")
    .selectAll("g")
      .data(d.children)
    .enter().append("svg:g")
      .style("cursor", function(d) { return !d.children ? null : "pointer"; })
      .on("click", down);

  bar.append("svg:text")
      .attr("x", -6)
      .attr("y", y / 2)
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .text(function(d) { return d.name; });

  bar.append("svg:rect")
      .attr("width", function(d) { return x(d.value); })
      .attr("height", y);

  return bar;
}

// A stateful closure for stacking bars horizontally.
function stack(i) {
  var x0 = 0;
  return function(d) {
    var tx = "translate(" + x0 + "," + y * i * 1.2 + ")";
    x0 += x(d.value);
    return tx;
  };
}









</script>
<% end %>